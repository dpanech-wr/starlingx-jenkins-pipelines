# bash
# vim: syn=sh:

# Define environment vars needed by the stx tool and jenkins scripts

# source build.conf
if [[ -z "$BUILD_CONF" ]] ; then
    echo "reading  $(dirname "${BASH_SOURCE[0]}")/build.conf" >&2
    source "$(dirname "${BASH_SOURCE[0]}")/build.conf" || return 1
else
    echo "reading  $BUILD_CONF"
    source "$BUILD_CONF" || return 1
fi

if [[ "$BUILD_USER" != "$(id -un)" ]] ; then
    echo "This script can be used only by user $BUILD_USER!" >&2
    exit 1
fi

BUILD_HOME="$(readlink -f "$(dirname "${BASH_SOURCE[0]}")")"

# These are named differently in the stx tool
export STX_BUILD_HOME="$BUILD_HOME"
export STX_BUILD_CPUS="$BUILD_CPUS"
export STX_PLATFORM="$K8S_PLATFORM"
export STX_INSECURE_DOCKER_REGISTRIES="$INSECURE_DOCKER_REGISTRIES"
export STX_K8S_NAMESPACE="$K8S_NAMESPACE"
export STX_BUILD_CPUS="$BUILD_CPUS"
export STX_CONTAINER_MTU="$CONTAINER_MTU"

if [[ -z "$KUBECONFIG" ]] ; then
    KUBECONFIG="$HOME/.kube/config"
fi
export KUBECONFIG
export PROJECT

# source import-stx if it exists
if [[ -f "$BUILD_HOME/repo/stx-tools/import-stx" ]] ; then
    echo "cd $BUILD_HOME/repo/stx-tools" >&2
    cd "$BUILD_HOME/repo/stx-tools" || return 1
    echo "sourcing ./import-stx" >&2
    source ./import-stx || return 1
else
    echo "WARNING: Build tools environment script $BUILD_HOME/repo/stx-tools/import-stx doesn't exist" >&2
fi
